
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TRAIN
  }
  data_param {
    source: "D:/mjsynth_digits100"
    batch_size: 32
    backend: LMDB
    label_size: 35
  }
}
layer {
  name: "data"
  type: "Data"
  top: "data"
  top: "label"
  include {
    phase: TEST
  }
  data_param {
    source: "D:/mjsynth_digits100"
    batch_size: 32
    backend: LMDB
    label_size: 35
  }
}
layer {
  bottom: "data"
  top: "conv1"
  name: "conv1"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 64
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv1"
  top: "conv1"
  name: "relu1"
  type: "ReLU"
}
layer {
  bottom: "conv1"
  top: "pool1"
  name: "pool1"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool1"
  top: "conv2"
  name: "conv2"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 128
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv2"
  top: "conv2"
  name: "relu2"
  type: "ReLU"
}
layer {
  bottom: "conv2"
  top: "pool2"
  name: "pool2"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride: 2
  }
}
layer {
  bottom: "pool2"
  top: "conv3"
  name: "conv3"
  type: "Convolution"
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_term: false
  }
}
layer {
  bottom:"conv3"
  top:"conv3"
  name:"bnorm3"
  type:"BatchNorm"
}
layer {
  bottom:"conv3"
  top:"conv3"
  name:"scale3"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "conv3"
  top: "conv3"
  name: "relu3"
  type: "ReLU"
}
layer {
  bottom: "conv3"
  top: "conv4"
  name: "conv4"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 256
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv4"
  top: "conv4"
  name: "relu4"
  type: "ReLU"
}
layer {
  bottom: "conv4"
  top: "pool4"
  name: "pool4"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride_h: 2
    stride_w: 1
	pad_h: 0
	pad_w: 1
  }
}
layer {
  bottom: "pool4"
  top: "conv5"
  name: "conv5"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_term: false
  }
}
layer {
  bottom:"conv5"
  top:"conv5"
  name:"bnorm5"
  type:"BatchNorm"
}
layer {
  bottom:"conv5"
  top:"conv5"
  name:"scale5"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "conv5"
  top: "conv5"
  name: "relu5"
  type: "ReLU"
}
layer {
  bottom: "conv5"
  top: "conv6"
  name: "conv6"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 512
    kernel_size: 3
    pad: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  bottom: "conv6"
  top: "conv6"
  name: "relu6"
  type: "ReLU"
}
layer {
  bottom: "conv6"
  top: "pool6"
  name: "pool6"
  type: "Pooling"
  pooling_param {
    pool: MAX
    kernel_size: 2
    stride_h: 2
    stride_w: 1
	pad_h: 0
	pad_w: 1
  }
}
layer {
  bottom: "pool6"
  top: "conv7"
  name: "conv7"
  type: "Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 2
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_term: false
  }
}

layer {
  name: "reshape"
  type: "Reshape"
  bottom: "conv7"
  top: "reshape"
  reshape_param {
  	shape {
	  	dim: 0
	  	dim: 0
	  	dim: -1
	  	dim: 1
  	}
  }
}

layer {
  bottom:"reshape"
  top:"bn1_branch2a"
  name:"bn1_branch2a"
  type:"BatchNorm"
}
layer {
  bottom:"bn1_branch2a"
  top:"bn1_branch2a"
  name:"scale1_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom:"bn1_branch2a"
  top: "bn1_branch2a"
  name:"res1_branch2a_relu"
  type: "ReLU"
}
layer {
  bottom: "bn1_branch2a"
  top:"res1_branch2a"
  name:"res1_branch2a"
  type:"Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  bottom:"res1_branch2a"
  top:"res1_branch2a"
  name:"bn1_branch2b"
  type:"BatchNorm"
}
layer {
  bottom:"res1_branch2a"
  top:"res1_branch2a"
  name:"scale1_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom:"res1_branch2a"
  top:"res1_branch2a"
  name:"res1_branch2b_relu"
  type: "ReLU"
}
layer {
  bottom:"res1_branch2a"
  top:"res1_branch2b"
  name:"res1_branch2b"
  type:"Convolution"
  convolution_param {
    num_output: 128
    kernel_h: 5
    kernel_w: 1
    pad_h: 2
    stride: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  bottom:"res1_branch2b"
  top:"res1_branch2b"
  name:"bn1_branch2c"
  type:"BatchNorm"
}
layer {
  bottom:"res1_branch2b"
  top:"res1_branch2b"
  name:"scale1_branch2c"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "res1_branch2b"
  top: "res1_branch2b"
  name:"res1_branch2c_relu"
  type: "ReLU"
}
layer {
  bottom:"res1_branch2b"
  top:"res1_branch2c"
  name:"res1_branch2c"
  type:"Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_term: false
  }
}
layer {
  bottom:"reshape"
  bottom:"res1_branch2c"
  top: "res1"
  name: "res1"
  type: "Eltwise"
}

layer {
  bottom:"res1"
  top:"bn2_branch2a"
  name:"bn2_branch2a"
  type:"BatchNorm"
}
layer {
  bottom:"bn2_branch2a"
  top:"bn2_branch2a"
  name:"scale2_branch2a"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom:"bn2_branch2a"
  top: "bn2_branch2a"
  name:"res2_branch2a_relu"
  type: "ReLU"
}
layer {
  bottom: "bn2_branch2a"
  top:"res2_branch2a"
  name:"res2_branch2a"
  type:"Convolution"
  convolution_param {
    num_output: 128
    kernel_size: 1
    pad: 0
    stride: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  bottom:"res2_branch2a"
  top:"res2_branch2a"
  name:"bn2_branch2b"
  type:"BatchNorm"
}
layer {
  bottom:"res2_branch2a"
  top:"res2_branch2a"
  name:"scale2_branch2b"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom:"res2_branch2a"
  top: "res2_branch2a"
  name:"res2_branch2b_relu"
  type: "ReLU"
}
layer {
  bottom:"res2_branch2a"
  top:"res2_branch2b"
  name:"res2_branch2b"
  type:"Convolution"
  convolution_param {
    num_output: 128
    kernel_h: 5
    kernel_w: 1
    pad_h: 2
    stride: 1
    bias_term: false
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
  }
}
layer {
  bottom:"res2_branch2b"
  top:"res2_branch2b"
  name:"bn2_branch2c"
  type:"BatchNorm"
}
layer {
  bottom:"res2_branch2b"
  top:"res2_branch2b"
  name:"scale2_branch2c"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom:"res2_branch2b"
  top:"res2_branch2b"
  name:"res2_branch2c_relu"
  type: "ReLU"
}
layer {
  bottom:"res2_branch2b"
  top:"res2_branch2c"
  name:"res2_branch2c"
  type:"Convolution"
  convolution_param {
    num_output: 512
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_term: false
  }
}
layer {
  bottom:"res1"
  bottom:"res2_branch2c"
  top: "res2"
  name: "res2"
  type: "Eltwise"
}
layer {
  bottom:"res2"
  top:"res2"
  name:"res2_bn"
  type:"BatchNorm"
}
layer {
  bottom:"res2"
  top:"res2"
  name:"res2_scale"
  type: "Scale"
  scale_param {
    bias_term: true
  }
}
layer {
  bottom: "res2"
  top: "res2"
  name:"res2_relu"
  type: "ReLU"
}

layer {
  bottom: "res2"
  top: "conv_out"
  name: "conv_out_37"
  type: "Convolution"
  param {
    lr_mult: 1
    decay_mult: 1
  }
  param {
    lr_mult: 2
    decay_mult: 0
  }
  convolution_param {
    num_output: 37
    kernel_size: 1
    weight_filler {
      type: "gaussian"
      std: 0.01
    }
    bias_filler {
      type: "constant"
      value: 0
    }
  }
}
layer {
  name: "loss"
  type: "CTCLoss"
  bottom: "conv_out"
  bottom: "label"
  top: "loss"
  include {
    phase: TRAIN
  }
}
layer {
  name: "result"
  type: "CTCDecoder"
  bottom: "conv_out"
  top: "result"
  include {
    phase: TEST
  }
}
layer {
  name: "accuracy"
  type: "SequenceAccuracy"
  bottom: "result"
  bottom: "label"
  top: "accu"
  include {
    phase: TEST
  }
}